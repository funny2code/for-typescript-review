"use client";

import {
  Badge,
  Button,
  Card,
  Flex,
  Grid,
  Heading,
  Loader,
  Tabs,
  Text,
  View,
} from "@aws-amplify/ui-react";
import { useEffect, useState } from "react";

import { AlertTriangle } from "lucide-react";
import { Company } from "@/types/company";
import DraftComponent from "@components/ContentEngine/Draft";
import GenerateButton from "@components/ContentEngine/GenerateButton";
import KeywordComponent from "@components/ContentEngine/Keyword";
import PreOutlineComponent from "@components/ContentEngine/PreOutline";
import PromoteComponent from "@components/ContentEngine/Promote";
import PublishComponent from "@components/ContentEngine/Publish";
import { Schema } from "amplify/data/resource";
import { useClient } from "contexts/ClientContext";
import { useKeywordGeneration } from "@components/ContentEngine/utls/useKeywordGeneration";
import { useRouter } from "next/navigation";
import { withGroupAccess } from "contexts/withGroupAccess";

type Product = Schema["Product"]["type"];
type Keyword = Schema["Keyword"]["type"];
type Draft = Schema["Draft"]["type"];

const ContentEngineProductKeywordPage = ({
  params,
}: {
  params: { companyId: string; productId: string; keywordId: string };
}) => {
  const router = useRouter();
  const client = useClient();
  const { companyId, productId, keywordId } = params;

  const [company, setCompany] = useState<Company>();
  const [product, setProduct] = useState<Product>();
  const [keyword, setKeyword] = useState<Keyword>();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [drafts, setDrafts] = useState<Draft[]>([]);
  const { handleGenerateClick } = useKeywordGeneration();

  const deleteDraft = async (draftId: string) => {
    try {
      setIsLoading(true);
      const { data, errors } = await client.models.Draft.delete({
        id: draftId,
      });
      if (errors) throw new Error(errors[0].message);
      console.log("Draft deleted:", data);
      // Here you might want to update the keyword state or refetch it
    } catch (err) {
      setError("Failed to delete draft. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const generateSectionHandler = async (sectionId: string) => {
    console.log("generateSectionHandler", sectionId);

    try {
      const { data, errors } =
        await client.mutations.initContentEngineOutlineSectionGen({
          sectionIds: [sectionId],
        });
      if (errors) throw new Error(errors[0].message);
    } catch (err) {
      setError("Failed to generate pre-writing. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const saveTitle = async (title: string) => {
    try {
      // setIsLoading(true);
      const { data, errors } = await client.models.Keyword.update({
        id: keywordId,
        approvedTitle: title,
      });
      if (errors) throw new Error(errors[0].message);
    } catch (err) {
      setError("Failed to approve pre-writing. Please try again.");
    } finally {
      // setIsLoading(false);
    }
  };

  const updateKeywordFlags = async (flags: {
    preOutlineStartApproval?: boolean;
    preOutlineAutoGenerated?: boolean;
    preOutlineResultApproved?: boolean;
    outlineStartApproval?: boolean;
    outlineAutoGenerated?: boolean;
    outlineResultApproved?: boolean;
  }) => {
    try {
      setIsLoading(true);
      const { data, errors } = await client.models.Keyword.update({
        id: keywordId,
        ...flags,
      });
      if (errors) throw new Error(errors[0].message);
      console.log("Keyword flags updated:", data);
      setKeyword((prevKeyword) => ({ ...prevKeyword, ...data } as Keyword));
    } catch (err) {
      setError("Failed to update keyword flags. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    const sub = client.models.Keyword.observeQuery({
      filter: {
        id: { eq: keywordId },
      },
    }).subscribe({
      next: async ({ items, isSynced }) => {
        if (isSynced) {
          if (items.length) {
            setKeyword(items[0] as Keyword);
            console.log("Keyword fetched:", items[0]);
            const draftData = await items[0].drafts();

            console.log("draftData", draftData);
            setDrafts(draftData.data as Draft[]);
            const { data: productData } = await (items[0].product() ??
              Promise.resolve(null));

            if (productData) {
              setProduct(productData as Product);
              console.log("product", productData);
            }

            const company = await (productData?.company() ??
              Promise.resolve(null));
            if (company) {
              setCompany(company.data as Company);
              console.log("company", company.data);
            }
            setIsLoading(false);
            // Fetch company data here if needed
          } else {
            setError("Keyword not found");
          }
        }
      },
    });
    return () => sub.unsubscribe();
  }, []);

  if (isLoading) {
    return (
      <Flex
        direction="column"
        alignItems="center"
        justifyContent="center"
        height="100vh"
      >
        <Loader size="large" />
        <Text>Loading keyword data...</Text>
      </Flex>
    );
  }

  if (error || !keyword || !product || !company) {
    return (
      <Card variation="elevated" className="m-4 p-6">
        <Flex direction="column" alignItems="center" gap="1rem">
          <AlertTriangle size={48} color="red" />
          <Heading level={3}>Error</Heading>
          <Text>{error || "Keyword not found"}</Text>
          <Button onClick={() => router.back()}>Go Back</Button>
        </Flex>
      </Card>
    );
  }

  return (
    <View className=" mx-auto p-4">
      <Card variation="elevated" id="command-bar" className="p-6 bg-gray-50">
        <Grid
          templateColumns="3fr 1fr"
          templateRows="auto"
          gap="1rem"
          alignItems="center"
        >
          <Flex direction="column" gap="2">
            <Flex alignItems="center" gap="4">
              <Heading level={3} className="text-2xl font-bold text-gray-800">
                {keyword?.keyword || "N/A"}
              </Heading>
              <Badge variation="info" className="text-sm">
                {keyword?.templateType || "Unknown Type"}
              </Badge>
            </Flex>
            <Text variation="secondary" className="text-sm text-gray-600">
              Status:{" "}
              <span className="font-semibold">{keyword?.status || "N/A"}</span>
            </Text>
            <Flex gap="2" className="mt-2">
              <Text className="text-xs text-gray-500">
                Product: {product?.productName || "N/A"}
              </Text>
              <Text className="text-xs text-gray-500">
                Company: {company?.companyName || "N/A"}
              </Text>
            </Flex>
          </Flex>
          <Flex justifyContent="flex-end">
            <GenerateButton
              keyword={keyword as Keyword}
              onGenerateClick={() => handleGenerateClick(keyword as Keyword)}
            />
          </Flex>
        </Grid>
      </Card>
      <Flex direction="column" gap="2rem">
        <Tabs.Container defaultValue={"pre-outline"}>
          <Tabs.List spacing="equal">
            <Tabs.Item value="keyword">Keyword</Tabs.Item>
            <Tabs.Item value="pre-outline">Pre-Outline</Tabs.Item>
            <Tabs.Item value="outline">Outline</Tabs.Item>
            <Tabs.Item value="publish">Publish</Tabs.Item>
            <Tabs.Item value="promote">Promote</Tabs.Item>
          </Tabs.List>
          <Tabs.Panel value="keyword">
            <KeywordComponent
              keyword={keyword as Keyword}
              company={company as Company}
              product={product as Product}
              updateKeywordFlags={updateKeywordFlags}
            />
          </Tabs.Panel>
          <Tabs.Panel value="pre-outline">
            <PreOutlineComponent
              keyword={keyword as Keyword}
              company={company as Company}
              product={product as Product}
              saveTitle={saveTitle}
            />
          </Tabs.Panel>
          <Tabs.Panel value="outline">
            <div>
              {drafts &&
                drafts.map((draft) => {
                  return (
                    <DraftComponent
                      key={draft.id}
                      keyword={keyword as Keyword}
                      draft={draft as Draft}
                      company={company as Company}
                      product={product as Product}
                      generateSection={generateSectionHandler}
                      deleteDraft={deleteDraft}
                    />
                  );
                })}
            </div>
          </Tabs.Panel>
          <Tabs.Panel value="publish">
            <PublishComponent
              keyword={keyword as Keyword}
              company={company as Company}
              product={product as Product}
            />
          </Tabs.Panel>
          <Tabs.Panel value="promote">
            <PromoteComponent
              keyword={keyword as Keyword}
              // company={company as Company}
              // product={product as Product}
              // approvePreWriting={approvePreWriting}
              // updateKeywordFlags={updateKeywordFlags}
              // viewOutline={viewOutline}
              // generateOutline={approveAndGenerate}
            />
          </Tabs.Panel>
        </Tabs.Container>
      </Flex>
    </View>
  );
};
export default withGroupAccess(ContentEngineProductKeywordPage, [
  "superAdmin",
  "companyAdmin",
]);
