"use client";

import {
  Badge,
  Button,
  ButtonGroup,
  Card,
  Flex,
  Heading,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  View,
} from "@aws-amplify/ui-react";
import { ICompanyState, IKeyword } from "interfaces";
import { useDispatch, useSelector } from "react-redux";
import { useEffect, useState } from "react";

import GenerateButton from "@components/ContentEngine/GenerateButton";
import KeywordEditForm from "@components/ContentEngine/KeywordEditForm";
import { Schema } from "amplify/data/resource";
import { selectCompanyState } from "@redux/reducers/companyReducer";
import { useClient } from "contexts/ClientContext";
import { useKeywordGeneration } from "@components/ContentEngine/utls/useKeywordGeneration";
import { useRouter } from "next/navigation";
import { withGroupAccess } from "contexts/withGroupAccess";

// type Product = Schema["Product"]["type"];
type Keyword = Schema["Keyword"]["type"];

const ContentEngineProductPage = () => {
  const router = useRouter();
  const client = useClient();
  const dispatch = useDispatch();
  const companyState: ICompanyState = useSelector(selectCompanyState);
  const { selectedCompany, selectedProduct } = companyState;

  const [showKeywordForm, setShowKeywordForm] = useState(false);
  const [keywords, setKeywords] = useState<Keyword[]>();
  const [selectedKeywords, setSelectedKeywords] = useState<string[]>([]);
  const { handleGenerateClick } = useKeywordGeneration();
  useEffect(() => {
    if (!selectedProduct) return;

    const selectionSet = [
      "id",
      "keyword",
      "title",
      "description",
      "phase",
      "templateType",
      "templateTypeId",
      "relatableContent",
      "status",
      "sme",
      "titleAndPersona",
      "relatedKeywords",
      "genPersona",
      "genMainTakeAway",
      "genSuggestedTitles",
      "approvedTitle",
      "genPreOutline",
      "genPreOutlineJson",
      "genMarkteingInfoJson",
      "genMarketingInfo",
      "genKeyTakeAways",
      "genAltTitles",
      "genSeoTitle",
      "genSeoMetaData",
      "genSeoMetadataJson",
      "genSocialPosts",
      "usagePromptTokens",
      "usageCompletionTokens",
      "usageTotalTokens",
      "preOutlineStartApproval",
      "preOutlineAutoGenerated",
      "preOutlineResultApproved",
      "outlineStartApproval",
      "outlineAutoGenerated",
      "outlineResultApproved",
      "draftGenerated",
      "draftApproved",
      "marketingInfoStartApproval",
      "marketingInfoAutoGenerated",
      "marketingInfoResultApproved",
      "socialsInfoStartApproval",
      "socialsInfoAutoGenerated",
      "socialsInfoResultApproved",
      "evalStartApproval",
      "evalAutoGenerated",
      "evalResultApproved",
      "contentRepurposingStartApproval",
      "socialGenerated",
      "drafts.*",
    ] as const;

    const sub = client.models.Keyword.observeQuery({
      filter: { productId: { eq: selectedProduct.id } },
      // selectionSet: [...selectionSet],
    }).subscribe({
      next: ({ items, isSynced }) => {
        setKeywords([...items]);
      },
    });
    return () => sub.unsubscribe();
  }, []);

  if (!selectedCompany || !selectedProduct) {
    return;
  }

  const viewKeyword = (keywordId: string) => {
    router.push(`/companies/content-engine/product/keyword/${keywordId}`);
    // router.push("/companies/content-engine/product/keyword");
  };

  const handleSelectAll = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.checked) {
      setSelectedKeywords(keywords?.map((k) => k.id) || []);
    } else {
      setSelectedKeywords([]);
    }
  };

  const deleteKeyword = async (keywordId: string) => {
    console.log("Delete Keyword", keywordId);
    const { data } = await client.models.Keyword.delete({ id: keywordId });
    console.log("data", data);
  };

  const handleCheckboxChange = (keywordId: string) => {
    setSelectedKeywords((prevSelected) =>
      prevSelected.includes(keywordId)
        ? prevSelected.filter((id) => id !== keywordId)
        : [...prevSelected, keywordId]
    );
  };

  const initialKeyword = {
    keyword: "",
    status: "AWAITING APPROVAL - PRE OUTLINE PROCESS",
    templateType: "listicle",
    templateTypeId: "ecc8b95c-53a6-4e4d-ab40-482fefa74816",
    phase: "PRE OUTLINE",
    productId: selectedProduct.id,
  };

  const getPhaseColor = (phase: string) => {
    switch (phase.toLowerCase()) {
      case "outline":
        return "bg-blue-100 text-blue-800";
      case "draft":
        return "bg-yellow-100 text-yellow-800";
      case "review":
        return "bg-purple-100 text-purple-800";
      case "published":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const approveAndGeneratePreOutline = async (keywordId: string) => {
    console.log("Approve and Generate Pre Outline", keywordId);

    const { data: updatedKeyword } = await client.models.Keyword.update({
      id: keywordId,
      status: "KEYWORD APPROVED - GENERATION IN PROGRESS",
      preOutlineStartApproval: true,
    });

    const { data, errors } = await client.mutations.generateContentEngine({
      keywordIds: [keywordId],
    });

    console.log("Pre-writing generated:", data);
    // Here you might want to update the keyword state or refetch it

    // TODO: Generate pre outline
    // TODO: Update draft status
    // TODO: Update keyword status
  };

  return (
    <View className=" mx-auto px-4 py-8">
      <Heading level={1} className="text-3xl font-bold mb-8">
        Keywords
      </Heading>

      <Card className="p-6">
        <Flex
          justifyContent="space-between"
          alignItems="center"
          className="mb-4"
        >
          <Heading level={2} className="text-xl font-semibold">
            Keywords
          </Heading>
          <Button
            onClick={() => setShowKeywordForm(!showKeywordForm)}
            variation="primary"
          >
            {showKeywordForm ? "Cancel" : "Create New Keyword"}
          </Button>
        </Flex>

        {showKeywordForm && (
          <View className="mb-6 p-4 bg-gray-50 rounded-lg">
            <Heading level={3} className="text-lg font-semibold mb-4">
              Create New Keyword
            </Heading>
            <KeywordEditForm
              keyword={initialKeyword as IKeyword}
              productId={selectedProduct.id}
              onSubmit={async (keyword) => {
                // console.log("keyword", keyword);
                setShowKeywordForm(false);
                // Add any additional logic here, like refreshing the keyword list
              }}
              onCancel={() => setShowKeywordForm(false)}
              type="create"
            />
          </View>
        )}

        <Table highlightOnHover={true}>
          <TableHead>
            <TableRow>
              <TableCell as="th">
                <input
                  type="checkbox"
                  onChange={handleSelectAll}
                  checked={keywords?.length === selectedKeywords.length}
                />
              </TableCell>
              <TableCell as="th">Keywords</TableCell>
              <TableCell as="th">Title</TableCell>
              <TableCell as="th">Status</TableCell>
              <TableCell as="th">Phase</TableCell>
              <TableCell as="th">Template Type</TableCell>
              <TableCell as="th">Next Action</TableCell>
              <TableCell as="th">Setting</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {keywords?.map((keyword) => (
              <TableRow key={keyword.id}>
                <TableCell>
                  <input
                    type="checkbox"
                    checked={selectedKeywords.includes(keyword.id)}
                    onChange={() => handleCheckboxChange(keyword.id)}
                  />
                </TableCell>
                <TableCell>{keyword.keyword}</TableCell>
                <TableCell>
                  {keyword.approvedTitle || "No Title Selected"}
                </TableCell>
                <TableCell>
                  <Badge
                    size="small"
                    variation={
                      keyword?.status?.includes("APPROVAL")
                        ? "warning"
                        : "success"
                    }
                  >
                    {keyword.status}
                  </Badge>
                </TableCell>
                <TableCell>
                  <span
                    className={`px-2 py-1 rounded-full text-xs font-medium ${getPhaseColor(
                      keyword.phase as string
                    )}`}
                  >
                    {keyword.phase}
                  </span>
                </TableCell>
                <TableCell>{keyword.templateType}</TableCell>
                <TableCell>
                  <ButtonGroup size="small">
                    <GenerateButton
                      keyword={keyword as Keyword}
                      onGenerateClick={() =>
                        handleGenerateClick(keyword as Keyword)
                      }
                      size="small"
                    />
                  </ButtonGroup>
                </TableCell>
                <TableCell>
                  <ButtonGroup size="small">
                    <Button
                      onClick={() => viewKeyword(keyword.id)}
                      variation="primary"
                    >
                      View
                    </Button>
                    <Button
                      onClick={() => deleteKeyword(keyword.id)}
                      variation="destructive"
                    >
                      Delete
                    </Button>
                  </ButtonGroup>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </Card>
    </View>
  );
};

export default withGroupAccess(ContentEngineProductPage, [
  "superAdmin",
  "companyAdmin",
]);
