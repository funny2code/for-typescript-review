import { Button, SelectField } from "@aws-amplify/ui-react";
import React, { useEffect, useState } from "react";

import { Schema } from "amplify/data/resource";
import { useClient } from "contexts/ClientContext";
import { IKeyword } from "interfaces";

type Product = Schema["Product"]["type"];
type Keyword = Schema["Keyword"]["type"];
type OutlineTemplatePrompt = Schema["OutLineTemplatePrompt"]["type"];

interface KeywordFormProps {
  keyword?: IKeyword;
  productId: string;
  onSubmit: (keyword: IKeyword) => void;
  onCancel: () => void;
  type: "edit" | "create";
}

const KeywordForm: React.FC<KeywordFormProps> = ({
  keyword: initialKeyword,
  productId,
  onSubmit,
  onCancel,
  type,
}) => {
  const client = useClient();
  const [title, setTitle] = useState(initialKeyword?.title || "");
  const [description, setDescription] = useState(
    initialKeyword?.description || ""
  );
  const [phase, setPhase] = useState(initialKeyword?.phase || "");
  const [status, setStatus] = useState(initialKeyword?.status || "");
  const [loading, setLoading] = useState(false);
  const [outlineTemplate, setOutlineTemplate] = useState<string | undefined>();
  const [outlineTemplates, setOutlineTemplates] = useState<
    OutlineTemplatePrompt[]
  >([]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    if (outlineTemplate === "" || outlineTemplate === undefined) {
      console.error("Outline template is required");
      setLoading(false);
      return;
    }

    const newKeyword = {
      productId,
      keyword: title,
      title,
      description,
      phase,
      status,
      templateType: outlineTemplates.find((t) => t.id === outlineTemplate)
        ?.artifactName,
      templateTypeId: outlineTemplate,
      preOutlineStartApproval: false,
      preOutlineAutoGenerated: false,
      preOutlineResultApproved: false,
      outlineStartApproval: false,
      outlineAutoGenerated: false,
      outlineResultApproved: false,
      draftGenerated: false,
      evalStartApproval: false,
      evalAutoGenerated: false,
      draftApproved: false,
      contentRepurposingStartApproval: false,
      socialGenerated: false,
    };

    // console.log("newKeyword", newKeyword);

    try {
      const isEditMode = type === "edit" && initialKeyword;
      const { data, errors } = isEditMode
        ? await client.models.Keyword.update(newKeyword as Keyword)
        : await client.models.Keyword.create(newKeyword as Keyword);

      // console.log("data", data);
      // console.log("errors", errors);

      if (errors) {
        console.error(
          `Error ${isEditMode ? "updating" : "creating"} keyword:`,
          errors
        );
      } else {
        // console.log(
        //   `Keyword ${isEditMode ? "updated" : "created"} successfully:`,
        //   data
        // );
        // onSubmit(data);
      }
    } catch (error) {
      console.error("Error updating/creating keyword:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const fetchOutlineTemplates = async () => {
      const { data: OutLineTemplatePrompts, errors } =
        await client.models.OutLineTemplatePrompt.list();
      if (errors) {
        console.error("Error fetching OutLineTemplatePrompts:", errors);
      } else {
        setOutlineTemplates(OutLineTemplatePrompts);
      }
    };

    fetchOutlineTemplates();
  }, [client.models.OutLineTemplatePrompt]);

  return (
    <form onSubmit={handleSubmit} className="mb-4">
      <div className="mb-4">
        <label htmlFor="title" className="block font-bold mb-2">
          Title
        </label>
        <input
          type="text"
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="border border-gray-300 rounded-md px-3 py-2 w-full"
          required
        />
      </div>
      <div className="mb-4">
        <label htmlFor="description" className="block font-bold mb-2">
          Description
        </label>
        <textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          className="border border-gray-300 rounded-md px-3 py-2 w-full"
        />
      </div>
      <div className="mb-4">
        <SelectField
          label="Outline type"
          descriptiveText="Select Outline type?"
          value={outlineTemplate}
          onChange={(e) => setOutlineTemplate(e.target.value)}
        >
          <option value="">Select Outline type</option>
          {outlineTemplates.map((template) => (
            <option key={template.id} value={template.id}>
              {template?.artifactName}
            </option>
          ))}
        </SelectField>
      </div>

      <Button type="submit" isLoading={loading} className="mr-2">
        {type === "edit" ? "Update" : "Create"} Keyword
      </Button>
      <button
        type="button"
        onClick={onCancel}
        className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
      >
        Cancel
      </button>
    </form>
  );
};

export default KeywordForm;
