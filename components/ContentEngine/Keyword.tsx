"use client";

import {
  Badge,
  Card,
  Divider,
  Flex,
  Heading,
  SwitchField,
  Text,
} from "@aws-amplify/ui-react";

import React from "react";
import { Schema } from "amplify/data/resource";

type Keyword = Schema["Keyword"]["type"];
type Product = Schema["Product"]["type"];
type Company = Schema["Company"]["type"];
type Draft = Schema["Draft"]["type"];

interface KeywordComponentProps {
  keyword: Keyword;
  company: Company;
  product: Product;

  updateKeywordFlags: (flags: {
    preOutlineStartApproval?: boolean;
    preOutlineAutoGenerated?: boolean;
    preOutlineResultApproved?: boolean;
    outlineStartApproval?: boolean;
    outlineAutoGenerated?: boolean;
    outlineResultApproved?: boolean;
  }) => void;
}

const KeywordComponent: React.FC<KeywordComponentProps> = ({
  keyword,
  company,
  product,

  updateKeywordFlags,
}) => {
  const handleFlagChange = (flagName: string) => (checked: boolean) => {
    updateKeywordFlags({ [flagName]: checked });
  };

  const getStatusColor = (status: string | undefined) => {
    if (!status) return "bg-gray-100 text-gray-800";

    switch (status.toLowerCase()) {
      case "pending":
        return "bg-yellow-100 text-yellow-800";
      case "completed":
        return "bg-green-100 text-green-800";
      case "in progress":
        return "bg-blue-100 text-blue-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <>
      <div>
        <Card className=" mx-auto p-6 bg-white shadow-lg rounded-lg">
          <Flex direction="column" gap="1.5rem">
            <Heading level={3} className="text-3xl font-bold text-gray-800">
              {keyword?.keyword}
            </Heading>

            <Flex direction="row" alignItems="center" gap="1rem">
              <Badge
                className={`px-3 py-1 rounded-full text-sm font-semibold ${getStatusColor(
                  keyword?.status as string
                )}`}
              >
                {keyword?.status}
              </Badge>
              <Text className="text-gray-600 font-medium">
                Phase: {keyword?.phase}
              </Text>
            </Flex>
            <Flex
              direction="row"
              justifyContent="center"
              // alignItems="center"
              // alignContent="center"
              gap="1rem"
            >
              <SwitchField
                label="preOutlineStartApproval"
                isChecked={keyword?.preOutlineStartApproval as boolean}
                onChange={(e) => {
                  handleFlagChange("preOutlineStartApproval")(e.target.checked);
                }}
              />
              <SwitchField
                label="preOutlineAutoGenerated"
                isChecked={keyword?.preOutlineAutoGenerated as boolean}
                onChange={(e) => {
                  handleFlagChange("preOutlineAutoGenerated")(e.target.checked);
                }}
              />
              <SwitchField
                label="preOutlineResultApproved"
                isChecked={keyword?.preOutlineResultApproved as boolean}
                onChange={(e) => {
                  handleFlagChange("preOutlineResultApproved")(
                    e.target.checked
                  );
                }}
              />
            </Flex>
            <Flex
              direction="row"
              justifyContent="center"
              alignItems="center"
              alignContent="center"
              gap="1rem"
            >
              <SwitchField
                label="outlineStartApproval"
                isChecked={keyword?.outlineStartApproval as boolean}
                onChange={(e) => {
                  handleFlagChange("outlineStartApproval")(e.target.checked);
                }}
              />
              <SwitchField
                label="outlineAutoGenerated"
                isChecked={keyword?.outlineAutoGenerated as boolean}
                onChange={(e) => {
                  handleFlagChange("outlineAutoGenerated")(e.target.checked);
                }}
              />
              <SwitchField
                label="outlineResultApproved"
                isChecked={keyword?.outlineResultApproved as boolean}
                onChange={(e) => {
                  handleFlagChange("outlineResultApproved")(e.target.checked);
                }}
              />
            </Flex>

            <Divider />
          </Flex>
        </Card>
      </div>
    </>
  );
};

export default KeywordComponent;
