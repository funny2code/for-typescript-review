"use client";

import {
  Badge,
  Button,
  ButtonGroup,
  Card,
  Divider,
  Flex,
  Heading,
  Text,
  View,
} from "@aws-amplify/ui-react";
import React, { useState } from "react";

import EditableOutlineComponent from "./EditableOutlineComponent";
import { Schema } from "amplify/data/resource";

type Keyword = Schema["Keyword"]["type"];
type Product = Schema["Product"]["type"];
type Company = Schema["Company"]["type"];
interface PreOutlineComponentProps {
  keyword: Keyword;
  company: Company;
  product: Product;
  // approvePreWriting: (selectedTitle: string) => void;
  // updateKeywordFlags: (flags: {
  //   preOutlineStartApproval?: boolean;
  //   preOutlineAutoGenerated?: boolean;
  //   preOutlineResultApproved?: boolean;
  // }) => void;
}

const OutlineComponent: React.FC<PreOutlineComponentProps> = ({
  keyword,
  company,
  product,
  // approvePreWriting,
  // updateKeywordFlags,
}) => {
  const [selectedTitle, setSelectedTitle] = useState<string>("");
  const [isEditing, setIsEditing] = useState(false);
  const [outlineData, setOutlineData] = useState(
    JSON.parse((keyword?.genPreOutlineJson as string) || "{}")
  );

  const handleSaveOutline = (newData: any) => {
    setOutlineData(newData);
    setIsEditing(false);
    // Here you would typically update the backend with the new data
    console.log("Saving new outline data:", newData);
  };

  console.log(keyword);

  // const handleApprove = () => {
  //   if (selectedTitle) {
  //     approvePreWriting(selectedTitle);
  //   } else {
  //     console.log("Please select a title before approving");
  //   }
  // };

  // const handleFlagChange = (flagName: string) => (checked: boolean) => {
  //   updateKeywordFlags({ [flagName]: checked });
  // };

  const getStatusColor = (status: string | undefined) => {
    if (!status) return "bg-gray-100 text-gray-800";

    switch (status.toLowerCase()) {
      case "pending":
        return "bg-yellow-100 text-yellow-800";
      case "completed":
        return "bg-green-100 text-green-800";
      case "in progress":
        return "bg-blue-100 text-blue-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <Card className="max-w-4xl mx-auto p-6 bg-white shadow-lg rounded-lg">
      <Flex direction="column" gap="1.5rem">
        <Heading level={3} className="text-3xl font-bold text-gray-800">
          {keyword?.keyword}
        </Heading>

        <Flex direction="row" alignItems="center" gap="1rem">
          <Badge
            className={`px-3 py-1 rounded-full text-sm font-semibold ${getStatusColor(
              keyword.status as string
            )}`}
          >
            {keyword.status}
          </Badge>
          <Text className="text-gray-600 font-medium">
            Phase: {keyword.phase}
          </Text>
        </Flex>

        <Divider />

        <View className="bg-gray-50 p-4 rounded-lg">
          <Heading level={4} className="text-xl font-semibold mb-3">
            {keyword.approvedTitle}
          </Heading>
          {/* <Flex
            direction="row"
            gap="1rem"
            justifyContent="space-between"
            wrap="wrap"
          >
            <View className="flex-1 min-w-[200px]">
              <SwitchField
                label={
                  <Flex alignItems="center" gap="0.5rem">
                    <Text className="font-medium text-sm">Start Approval</Text>
                    {keyword.preOutlineStartApproval ? (
                      <CheckCircle className="text-green-500" size={16} />
                    ) : (
                      <XCircle className="text-red-500" size={16} />
                    )}
                  </Flex>
                }
                isChecked={!!keyword.preOutlineStartApproval}
                onChange={(e) =>
                  handleFlagChange("preOutlineStartApproval")(e.target.checked)
                }
                className="switch-field"
              />
            </View>
            <View className="flex-1 min-w-[200px]">
              <SwitchField
                label={
                  <Flex alignItems="center" gap="0.5rem">
                    <Text className="font-medium text-sm">Auto-Generated</Text>
                    {keyword.preOutlineAutoGenerated ? (
                      <CheckCircle className="text-green-500" size={16} />
                    ) : (
                      <XCircle className="text-red-500" size={16} />
                    )}
                  </Flex>
                }
                isChecked={!!keyword.preOutlineAutoGenerated}
                onChange={(e) =>
                  handleFlagChange("preOutlineAutoGenerated")(e.target.checked)
                }
                className="switch-field"
              />
            </View>
            <View className="flex-1 min-w-[200px]">
              <SwitchField
                label={
                  <Flex alignItems="center" gap="0.5rem">
                    <Text className="font-medium text-sm">Result Approved</Text>
                    {keyword.preOutlineResultApproved ? (
                      <CheckCircle className="text-green-500" size={16} />
                    ) : (
                      <XCircle className="text-red-500" size={16} />
                    )}
                  </Flex>
                }
                isChecked={!!keyword.preOutlineResultApproved}
                onChange={(e) =>
                  handleFlagChange("preOutlineResultApproved")(e.target.checked)
                }
                className="switch-field"
              />
            </View>
          </Flex> */}
        </View>

        {/* <Divider /> */}

        {/* <View className="space-y-4">
          <Flex direction="column" gap="0.5rem">
            <Text className="font-semibold text-gray-700">Description:</Text>
            <Text className="text-gray-600 bg-gray-50 p-3 rounded-md">
              {keyword.description}
            </Text>
          </Flex>
          <Flex direction="column" gap="0.5rem">
            <Text className="font-semibold text-gray-700">Template Type:</Text>
            <Text className="text-gray-600 bg-gray-50 p-3 rounded-md">
              {keyword.templateType}
            </Text>
          </Flex>
        </View>

        <Divider /> */}

        {/* <Accordion.Container allowMultiple>
          <Accordion.Item value="sme-creation">
            <Accordion.Trigger>
              <Flex
                alignItems="center"
                justifyContent="space-between"
                width="100%"
              >
                <Flex alignItems="center" gap="0.5rem">
                  <Text className="font-semibold">SME Creation</Text>
                  <HelpCircle size={16} className="text-gray-400" />
                </Flex>
              </Flex>
            </Accordion.Trigger>
            <Accordion.Content>
              <View className="p-4 bg-gray-50 rounded-lg">
                {keyword.sme || "No SME content available."}
              </View>
            </Accordion.Content>
          </Accordion.Item>

          <Accordion.Item value="scrape-related-content">
            <Accordion.Trigger>
              <Flex
                alignItems="center"
                justifyContent="space-between"
                width="100%"
              >
                <Flex alignItems="center" gap="0.5rem">
                  <Text className="font-semibold">Scrape Related Content</Text>
                  <HelpCircle size={16} className="text-gray-400" />
                </Flex>
              </Flex>
            </Accordion.Trigger>
            <Accordion.Content>
              <View className="p-4 bg-gray-50 rounded-lg">
                {keyword.relatableContent || "No related content available."}
              </View>
            </Accordion.Content>
          </Accordion.Item>

          <Accordion.Item value="title-and-personas">
            <Accordion.Trigger>
              <Flex
                alignItems="center"
                justifyContent="space-between"
                width="100%"
              >
                <Flex alignItems="center" gap="0.5rem">
                  <Text className="font-semibold">
                    Title and Personas Generation
                  </Text>
                  <HelpCircle size={16} className="text-gray-400" />
                </Flex>
              </Flex>
            </Accordion.Trigger>
            <Accordion.Content>
              <View className="p-4 bg-gray-50 rounded-lg space-y-2">
                <Text>
                  <strong>Persona:</strong> {keyword.genPersona}
                </Text>
                <Text>
                  <strong>Main Takeaway:</strong> {keyword.genMainTakeAway}
                </Text>
                <Text>
                  <strong>Suggested Titles:</strong>
                </Text>
                <ul className="list-disc pl-5">
                  {keyword.genSuggestedTitles?.map((title, index) => (
                    <li key={index}>{title}</li>
                  ))}
                </ul>
              </View>
            </Accordion.Content>
          </Accordion.Item>

          <Accordion.Item value="related-keyword-analysis">
            <Accordion.Trigger>
              <Flex
                alignItems="center"
                justifyContent="space-between"
                width="100%"
              >
                <Flex alignItems="center" gap="0.5rem">
                  <Text className="font-semibold">
                    Related Keyword Analysis
                  </Text>
                  <HelpCircle size={16} className="text-gray-400" />
                </Flex>
              </Flex>
            </Accordion.Trigger>
            <Accordion.Content>
              <View className="p-4 bg-gray-50 rounded-lg">
                <ul className="list-disc pl-5">
                  {keyword.relatedKeywords?.map((relatedKeyword, index) => (
                    <li key={index}>{relatedKeyword}</li>
                  ))}
                </ul>
              </View>
            </Accordion.Content>
          </Accordion.Item>
        </Accordion.Container> */}
        <Divider />
        {/* <View className="bg-gray-50 p-4 rounded-lg space-y-4">
          {JSON.stringify(keyword.genPreOutlineJson)}
        </View> */}

        <View className="bg-gray-50 p-4 rounded-lg space-y-4">
          {/* {isEditing ? ( */}
          <EditableOutlineComponent
            initialData={outlineData}
            onSave={handleSaveOutline}
          />
        </View>

        <View className="bg-gray-50 p-4 rounded-lg space-y-4">
          {/* <Markdown
            remarkPlugins={[
              remarkGfm,
              remarkBreaks,
              rehypeStringify,
              remarkParse,
              remarkRehype,
            ]}
          >
            {keyword.genPreOutline || "No Pre-Outline content available."}
          </Markdown> */}
          <View className="flex justify-end">
            <ButtonGroup>
              <Button>Regenerate</Button>
              {/* <Button
                onClick={handleApprove}
                isDisabled={!keyword.genPreOutline}
              >
                Approve and Continue
              </Button> */}
            </ButtonGroup>
          </View>

          {/* <Text className="font-semibold text-lg text-gray-700">
            Suggested Titles: Please Select one
          </Text>
          <RadioGroupField
            name="suggested-titles"
            legend="Suggested Titles"
            value={selectedTitle}
            onChange={(e) => setSelectedTitle(e.target.value)}
          >
            {keyword.genSuggestedTitles?.map((title, index) => (
              <Radio key={index} value={title ?? ""} className="mb-2">
                {title}
              </Radio>
            ))}
          </RadioGroupField> */}
          <Divider />
          <ButtonGroup>
            {/* <Button onClick={handleApprove} isDisabled={!selectedTitle}>
              Approve and Continue
            </Button> */}
            <Button>Regenerate</Button>
          </ButtonGroup>
        </View>
      </Flex>
    </Card>
  );
};

export default OutlineComponent;
