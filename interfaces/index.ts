import { Schema } from "amplify/data/resource";

// Types for Prompt
export type PromptType = Schema["Prompt"]["type"];
export type PromptSetType = Schema["Promptset"]["type"];

// Report Interface
export interface IReport {
  readonly url: string;
  readonly id: string;
  readonly title: string;
  readonly introduction: string;
  readonly matchedWords: number;
  readonly identicalWords: number;
  readonly similarWords: number;
  readonly paraphrasedWords: number;
  readonly totalWords: number;
  readonly metadata: Record<string, unknown>;
  readonly tags: string[];
}

// File Manager Interfaces
export type IID = string | number;

export interface IParentFolder {
  readonly parentFolder: {
    readonly _id: string;
    readonly name: string;
    readonly ancestor: string;
    readonly children: object[];
    readonly designation: string;
  };
}

export interface IFilePath {
  readonly id: IID;
  readonly name: string;
  readonly index: number;
}

export interface IFile {
  readonly children: IFile[];
  readonly id: IID;
  readonly name: string;
  readonly isFolder: boolean;
  readonly parentId: IID;
  readonly color: string;
  readonly index?: number | string;
  readonly path: string;
}

export interface IFolderState {
  readonly data: IFile | {};
  readonly subFolder: IFile[];
  readonly path: IFilePath[];
  readonly pathTree: IFile[][];
  readonly currentPath: string;
  readonly isLoading: boolean;
  readonly stagedFile: IStagedFile;
  readonly activeFolder: { id: IID; editable: boolean };
  readonly selectedFilePath: string | null;
}

export interface IFileComProps {
  readonly file: IFile;
  readonly index: number;
  readonly sourceFile: IFile | null;
  readonly targetId: IID | null;
  readonly setSourceFile: React.Dispatch<React.SetStateAction<IFile | null>>;
  readonly setTargetId: React.Dispatch<React.SetStateAction<IID | null>>;
  readonly handleOnOpenFolder: (folder: IFile, index: number) => void;
}

export type IStagedFile = { stageType: "copy" | "cut" | "none"; file: IFile };

// Dialog Interface
export interface IConfirmDialog {
  readonly open: boolean;
  readonly title: string;
  readonly content: string;
  readonly isConfirm: boolean;
  readonly handleConfirm: () => void;
}

// Company State Interfaces
export interface IPillar {
  readonly pillar_name: string;
  readonly pillar_details: string;
}

export interface IPersona {
  readonly persona_name: string;
  readonly persona_details: string;
}

export interface ISocial {
  readonly platform: string;
  readonly handle: string;
}

export interface IBrandToneKeyword {
  readonly use: string;
  readonly avoid: string;
}

export interface INewCompany {
  readonly companyName: string;
  readonly companyBackground: string;
  readonly companyWebsite: string;
  readonly socials: ISocial[];
  readonly [key: string]: unknown;
}

export interface IKeyword {
  readonly id: string;
  readonly productId: string;
  readonly keyword: string;
  readonly title: string;
  readonly description: string;
  readonly phase: string;
  readonly templateType: string;
  readonly templateTypeId: string;
  readonly relatableContent: string;
  readonly status: string;
  readonly sme: string;
  readonly titleAndPersona: string;
  readonly relatedKeywords: string[];
  readonly genPersona: string;
  readonly genMainTakeAway: string;
  readonly genSuggestedTitles: string[];
  readonly approvedTitle: string;
  readonly genPreOutline: string;
  readonly genPreOutlineJson: string;
  readonly genMarkteingInfoJson: string;
  readonly genMarketingInfo: string;
  readonly genKeyTakeAways: string[];
  readonly genAltTitles: string[];
  readonly genSeoTitle: string;
  readonly genSeoMetaData: string;
  readonly genSeoMetadataJson: string;
  readonly genSocialPosts: string;
  readonly usagePromptTokens: number;
  readonly usageCompletionTokens: number;
  readonly usageTotalTokens: number;
  readonly preOutlineStartApproval: boolean;
  readonly preOutlineAutoGenerated: boolean;
  readonly preOutlineResultApproved: boolean;
  readonly outlineStartApproval: boolean;
  readonly outlineAutoGenerated: boolean;
  readonly outlineResultApproved: boolean;
  readonly draftGenerated: boolean;
  readonly draftApproved: boolean;
  readonly marketingInfoStartApproval: boolean;
  readonly marketingInfoAutoGenerated: boolean;
  readonly marketingInfoResultApproved: boolean;
  readonly socialsInfoStartApproval: boolean;
  readonly socialsInfoAutoGenerated: boolean;
  readonly socialsInfoResultApproved: boolean;
  readonly evalStartApproval: boolean;
  readonly evalAutoGenerated: boolean;
  readonly evalResultApproved: boolean;
  readonly contentRepurposingStartApproval: boolean;
  readonly socialGenerated: boolean;
  readonly drafts?: unknown[];
}

export interface IProduct {
  readonly id: string;
  readonly productName: string;
  readonly productValueProp: string;
  readonly productFeature: string;
  readonly productCtaURL: string;
  readonly status: string;
  readonly keywords?: IKeyword[];
}

export interface ICompany {
  readonly id: string;
  readonly companyName: string;
  readonly companyBackground: string;
  readonly companyWebsite: string;
  readonly socials: ISocial[];
  readonly brandPromise: string;
  readonly brandTone: string;
  readonly brandToneSentiments: unknown[];
  readonly brandToneKeywords: IBrandToneKeyword;
  readonly brandValueProp: string;
  readonly brandPersonas: IPersona[];
  readonly brandContentPillars: IPillar[];
  readonly status: string;
  readonly companyTypes: "SERVICES" | "PRODUCTS" | "OTHER";
  readonly members: string[];
  readonly products?: IProduct[];
  readonly iterations: unknown[];
  readonly threads: unknown[];
  readonly joinCodes: unknown[];
  readonly AIrequests: unknown[];
  readonly slider_1_c2p: number;
  readonly slider_2_t2t: number;
  readonly slider_3_i2p: number;
  readonly slider_4_p2r: number;
  readonly slider_5_u2c: number;
}

export interface ITag {
  readonly id: string;
  readonly tagName: string;
}

export interface ITool {
  readonly id: string;
  readonly name: string;
  readonly toolDescription: string;
  readonly tags: ITag[];
  readonly toolEndUserMessage: string;
  readonly inputs: string;
  readonly status:
    | "DRAFT"
    | "ACTIVE"
    | "PENDING"
    | "INACTIVE"
    | "ARCHIVED"
    | "INPROGRESS"
    | "ERROR";
  readonly assistantId: string;
  readonly userMessage: string;
  readonly toolImageURL: string;
  readonly toolAdditionalInstructions: string;
  readonly toolFunctions: string;
  readonly toolOptions: string;
  readonly isFeatured: boolean;
  readonly owners: string[];
  readonly instructions: string;
  readonly createdAt: string;
}

export interface IMessage {
  readonly id: string;
  readonly threadId: string;
  readonly content: string;
  readonly aiMessageId: string;
  readonly role: string;
  readonly user: string;
}

export interface IThread {
  readonly id: string;
  readonly name: string;
  readonly companyId: string;
  readonly aiThreadId: string;
  readonly runId: string;
  readonly toolId: string;
  readonly intialPayload: string;
  readonly summary: string;
  readonly status:
    | "DRAFT"
    | "PENDING"
    | "INPROGRESS"
    | "ERROR"
    | "COMPLETED"
    | "FAILED";
  readonly messages: IMessage[];
  readonly owners: string[];
}

export interface ICompanyState {
  readonly companies: ICompany[];
  readonly selectedIndex: number | null;
  readonly selectedCompany: ICompany | null;
  readonly selectedCompanyId: string | null;
  readonly isUpdatedFromServer: boolean;
  readonly tools: ITool[];
  readonly selectedTool: ITool | null;
  readonly selectedThread: IThread | null;
  readonly editToolByAdmin: ITool | null;
  readonly selectedProduct?: IProduct | null;
}

export interface IAIEditorState {
  readonly aiEditorData: {
    readonly content: string;
    readonly completionApi: string;
    readonly gptModel: string;
    readonly gptTemp: number;
    readonly gptUserPrt: string;
    readonly gptSysPrt: string;
    readonly gptHighlight: string;
    readonly gptArbVars: Record<string, string>;
    readonly gptTopP: number;
    readonly gptMaxTokens: number;
    readonly textToInsert: string;
    readonly textFull: string;
    readonly promptSets: PromptSetType[];
    readonly selectedPromptSetId: string | null;
    readonly selectedPromptId: string | null;
    readonly llmOpt: string;
    readonly scanId: string;
    readonly reports: IReport[];
    readonly isScanning: boolean;
    readonly novelEditor: unknown;
    readonly reportDetail: unknown;
  };
}