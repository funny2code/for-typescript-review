import { Schema } from "amplify/data/resource";

export type PromptType = Schema["Prompt"]["type"];
export type PromptSetType = Schema["Promptset"]["type"];

export interface IReport {
    url: string;
    id: string;
    title: string;
    introduction: string;
    matchedWords: number;
    identicalWords: number;
    similarWords: number;
    paraphrasedWords: number;
    totalWords: number;
    metadata: Record<string, unknown>;
    tags: string[];
};

// File Manager Interfaces

export type IID = string | number;
export interface IParentFolder {
  parentFolder: {
    _id: string;
    name: string;
    ancestor: string;
    children: object[];
    designation: string;
  };
}

export type IFilePath = {
  id: IID;
  name: string;
  index: number;
};

export type IFile = {
  children: IFile[];
  id: IID;
  name: string;
  isFolder: boolean;
  parentId: string | number;
  color: string;
  index?: number | string;
  path: string;
};

export interface IFolderState {
  data: IFile | {};
  subFolder: IFile[];
  path: IFilePath[];
  pathTree: IFile[][];
  currentPath: string;
  isLoading: boolean;
  stagedFile: { stageType: "copy" | "cut" | "none"; file: IFile | {} };
  activeFolder: { id: string | number; editable: boolean };
  selectedFilePath: string | null;
}

export interface IFileComProps {
  file: IFile;
  index: number;
  sourceFile: IFile | null;
  targetId: IID | null;
  setSourceFile: React.Dispatch<React.SetStateAction<IFile | null>>;
  setTargetId: React.Dispatch<React.SetStateAction<IID | null>>;
  handleOnOpenFolder: (folder: IFile, index: number) => void;
};

export type IStagedFile = { stageType: "copy" | "cut"; file: IFile };

export type IConfirmDialog = {
  open: boolean;
  title: string;
  content: string;
  isConfirm: boolean;
  handleConfirm: () => void;
};


// Company State
export interface IPillar {
    pillar_name: string;
    pillar_details: string;
}
  
export interface IPersona {
    persona_name: string;
    persona_details: string;
}

export interface ISocial {
    platform: string;
    handle: string;
}
export interface IBrandToneKeyword {
  use: string,
  avoid: string
}

export interface INewCompany {
  [key: string]: any; 
  companyName: string;
  companyBackground: string;
  companyWebsite: string;
  socials: ISocial[],
}

export interface IKeyword {
  id: string;
  productId: string;
  keyword: string;
  title: string;
  description: string;
  phase: string;
  templateType: string;
  templateTypeId: string;
  relatableContent: string;
  status: string;
  sme: string;
  titleAndPersona: string;
  relatedKeywords: string[];
  genPersona: string;
  genMainTakeAway: string;
  genSuggestedTitles: string[];
  approvedTitle: string;
  genPreOutline: string;
  genPreOutlineJson: string; //a.json(),
  genMarkteingInfoJson: string; // a.json(),
  genMarketingInfo: string;
  genKeyTakeAways: string[];
  genAltTitles: string[];
  genSeoTitle: string;
  genSeoMetaData: string;
  genSeoMetadataJson: string; //a.json(),
  genSocialPosts:  string; //a.json(),
  usagePromptTokens: number;
  usageCompletionTokens: number;
  usageTotalTokens: number;
  preOutlineStartApproval: boolean;
  preOutlineAutoGenerated: boolean;
  preOutlineResultApproved: boolean;
  outlineStartApproval: boolean;
  outlineAutoGenerated: boolean;
  outlineResultApproved: boolean;
  draftGenerated: boolean;
  draftApproved: boolean;
  marketingInfoStartApproval: boolean;
  marketingInfoAutoGenerated: boolean;
  marketingInfoResultApproved: boolean;
  socialsInfoStartApproval: boolean;
  socialsInfoAutoGenerated: boolean;
  socialsInfoResultApproved: boolean;
  evalStartApproval: boolean;
  evalAutoGenerated: boolean;
  evalResultApproved: boolean;
  contentRepurposingStartApproval: boolean;
  socialGenerated: boolean;
  drafts?: any[]; //a.hasMany("Draft", "keywordId"),
}

export interface IProduct {
  id: string;
  productName: string;
  productValueProp: string;
  productFeature: string;
  productCtaURL: string;
  status: string;
  keywords?: IKeyword[];
}

export interface ICompany {
    [key: string]: any; 
    id: string;
    companyName: string;
    companyBackground: string;
    companyWebsite: string;
    socials: ISocial[],
    brandPromise: string;
    brandTone: string;
    brandToneSentiments: any[];
    brandToneKeywords: IBrandToneKeyword;

    brandValueProp: string;
    brandPersonas: IPersona[],
    brandContentPillars: IPillar[],
    status: string;
    companyTypes: "SERVICES" | "PRODUCTS" | "OTHER";

    members: string[];
    products?: IProduct[];
    iterations: any[];
    threads: any[];
    joinCodes: any[];
    AIrequests: any[];

    slider_1_c2p: number;
    slider_2_t2t: number;
    slider_3_i2p: number;
    slider_4_p2r: number;
    slider_5_u2c: number;
}

export interface ITag {
  id: string;
  tagName: string;
  /* owners: string[];
  tools: ITool[]; */
}

export interface ITool {
  id: string;
  name: string;
  toolDescription: string;
  tags: ITag[];
  toolEndUserMessage: string;
  inputs: string;
  status: "DRAFT" | "ACTIVE" | "PENDING" | "INACTIVE" | "ARCHIVED" | "INPROGRESS" | "ERROR";
  assistantId: string;
  userMessage: string;
  toolImageURL: string;
  toolAdditionalInstructions: string;
  toolFunctions: string;
  toolOptions: string;
  isFeatured: boolean;
  owners: string[];
  instructions: string;
  createdAt: string;
}

export interface IMessage {
  id: string;
  threadId: string;
  content: string;
  aiMessageId: string;
  role: string;
  user: string;
}

export interface IThread {
  id: string;
  name: string;
  companyId: string;
  aiThreadId: string;
  runId: string;
  toolId: string;
  intialPayload: string;
  summary: string;
  status: "DRAFT" | "PENDING" | "INPROGRESS" | "ERROR" | "COMPLETED" | "FAILED";
/*   company */
  messages: IMessage[];
  owners: string[];
}
export interface ICompanyState {
  companies: ICompany[];
  selectedIndex: number | null;
  selectedCompany: ICompany | null;
  selectedCompanyId: string | null;
  isUpdatedFromServer: boolean;
  tools: ITool[];
  selectedTool: ITool | null;
  selectedThread: IThread | null;
  editToolByAdmin: ITool | null;
  selectedProduct?: IProduct | null;
}

export interface IAIEditorState {
  aiEditorData: {
    content: string;
    completionApi: string;
    gptModel: string;
    gptTemp: number;
    gptUserPrt: string;
    gptSysPrt: string;
    gptHighlight: string;
    gptArbVars: { [key: string]: string };
    gptTopP: number;
    gptMaxTokens: number;
    textToInsert: string;
    textFull: string;
    promptSets: PromptSetType[];
    selectedPromptSetId: string | null;
    selectedPromptId: string | null;
    llmOpt: string;
    scanId: string;
    reports: IReport[];
    isScanning: boolean;
    novelEditor: any;
    reportDetail: any;
  };
}